version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: globeco-execution-db
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./execution-service.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - globeco-network

  # Kafka (using Redpanda for simplicity)
  kafka:
    image: redpandadata/redpanda:latest
    container_name: globeco-kafka
    command:
      - redpanda
      - start
      - --smp
      - "1"
      - --reserve-memory
      - "0M"
      - --overprovisioned
      - --node-id
      - "0"
      - --kafka-addr
      - "PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092"
      - --advertise-kafka-addr
      - "PLAINTEXT://kafka:29092,OUTSIDE://localhost:9092"
    ports:
      - "9092:9092"
      - "29092:29092"
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster info"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - globeco-network

  # Mock Security Service (for testing)
  mock-security-service:
    image: wiremock/wiremock:latest
    container_name: mock-security-service
    ports:
      - "8000:8080"
    volumes:
      - ./wiremock:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - globeco-network

  # Mock Trade Service (for testing)
  mock-trade-service:
    image: wiremock/wiremock:latest
    container_name: mock-trade-service
    ports:
      - "8082:8080"
    volumes:
      - ./wiremock-trade:/home/wiremock
    command: ["--global-response-templating", "--verbose"]
    networks:
      - globeco-network

  # Execution Service
  execution-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: globeco-execution-service
    ports:
      - "8084:8084"
    environment:
      # Database
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      
      # Kafka
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # External Services
      SECURITY_SERVICE_BASE_URL: http://mock-security-service:8080
      TRADE_SERVICE_BASE_URL: http://mock-trade-service:8080
      
      # Performance tuning for containers
      JAVA_OPTS: >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=75.0
        -XX:+UseG1GC
        -XX:G1HeapRegionSize=16m
        -XX:+UseStringDeduplication
        -Djava.security.egd=file:/dev/./urandom
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8084/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - globeco-network

volumes:
  postgres_data:

networks:
  globeco-network:
    driver: bridge