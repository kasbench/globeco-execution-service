spring.application.name=globeco-execution-service
server.port=8084


# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://globeco-execution-service-postgresql:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# Flyway Configuration
spring.flyway.url=jdbc:postgresql://globeco-execution-service-postgresql:5432/postgres
spring.flyway.user=postgres
spring.flyway.password=
spring.flyway.schemas=public
spring.flyway.locations=classpath:db/migration
spring.flyway.validate-on-migrate=false

# Kafka Configuration
spring.kafka.bootstrap-servers=globeco-execution-service-kafka:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.client-id=globeco-execution-service-producer

# Orders topic name
kafka.topic.orders=orders

# Trade service integration
trade.service.host=globeco-trade-service
trade.service.port=8082
trade.service.base-url=http://${trade.service.host}:${trade.service.port}
trade.service.timeout=5000
trade.service.retry.enabled=true
trade.service.retry.max-attempts=2

# Security service integration
security-service.base-url=http://globeco-security-service:8000
security-service.timeout.connect=5s
security-service.timeout.read=10s
security-service.cache.ttl=5m
security-service.cache.max-size=10000

# Database Performance Monitoring
spring.jpa.properties.hibernate.generate_statistics=true
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Micrometer OpenTelemetry (OTLP) Metrics Export
management.otlp.metrics.export.url=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/metrics
management.otlp.metrics.export.step=1m
management.otlp.metrics.export.resource-attributes.service.name=globeco-execution-service
management.otlp.metrics.export.resource-attributes.service.version=1.0.0
management.otlp.metrics.export.resource-attributes.service.namespace=globeco
management.otlp.metrics.export.resource-attributes.service.instance.version=1.0.0
management.otlp.metrics.export.resource-attributes.service.instance.namespace=globeco

# OpenTelemetry Tracing Export (OTLP)
management.otlp.tracing.endpoint=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/traces
management.otlp.tracing.resource-attributes.service.name=globeco-execution-service
management.otlp.tracing.resource-attributes.service.version=1.0.0
management.otlp.tracing.resource-attributes.service.namespace=globeco
management.otlp.tracing.resource-attributes.service.instance.namespace=globeco
management.otlp.tracing.sampling.probability=1.0

# Logging (Optional, for debugging export issues)
logging.level.io.micrometer.registry.otlp=DEBUG
logging.level.io.opentelemetry.exporter.otlp=DEBUG

# Actuator endpoint exposure for observability
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always



